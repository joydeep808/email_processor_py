[
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.redis_service",
        "description": "app.services.redis_service",
        "isExtraImport": true,
        "detail": "app.services.redis_service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.redis_service",
        "description": "app.services.redis_service",
        "isExtraImport": true,
        "detail": "app.services.redis_service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "importPath": "app.services.redis_service",
        "description": "app.services.redis_service",
        "isExtraImport": true,
        "detail": "app.services.redis_service",
        "documentation": {}
    },
    {
        "label": "EmailService",
        "importPath": "app.services.email_service",
        "description": "app.services.email_service",
        "isExtraImport": true,
        "detail": "app.services.email_service",
        "documentation": {}
    },
    {
        "label": "EmailService",
        "importPath": "app.services.email_service",
        "description": "app.services.email_service",
        "isExtraImport": true,
        "detail": "app.services.email_service",
        "documentation": {}
    },
    {
        "label": "EmailService",
        "importPath": "app.services.email_service",
        "description": "app.services.email_service",
        "isExtraImport": true,
        "detail": "app.services.email_service",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "cachetools.func",
        "description": "cachetools.func",
        "isExtraImport": true,
        "detail": "cachetools.func",
        "documentation": {}
    },
    {
        "label": "RabbitMQService",
        "importPath": "app.services.rabbit_service",
        "description": "app.services.rabbit_service",
        "isExtraImport": true,
        "detail": "app.services.rabbit_service",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Row",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "app.model.connection",
        "description": "app.model.connection",
        "isExtraImport": true,
        "detail": "app.model.connection",
        "documentation": {}
    },
    {
        "label": "emails",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "emails",
        "description": "emails",
        "detail": "emails",
        "documentation": {}
    },
    {
        "label": "formataddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pika",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pika",
        "description": "pika",
        "detail": "pika",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "update_record_by_id",
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "isExtraImport": true,
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "EmailCreate",
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "isExtraImport": true,
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "get_email",
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "isExtraImport": true,
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "save_email_in_db",
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "isExtraImport": true,
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "SessionDep",
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "isExtraImport": true,
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "create_db_and_tables",
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "isExtraImport": true,
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "get_record_by_id",
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "isExtraImport": true,
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "update_record_by_id",
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "isExtraImport": true,
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "EmailCreate",
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "isExtraImport": true,
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "get_email",
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "isExtraImport": true,
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "get_rabbitmq_service",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "get_redis_service",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "get_rabbitmq_service",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "emails.loader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "emails.loader",
        "description": "emails.loader",
        "detail": "emails.loader",
        "documentation": {}
    },
    {
        "label": "JinjaTemplate",
        "importPath": "emails.template",
        "description": "emails.template",
        "isExtraImport": true,
        "detail": "emails.template",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "AsyncIOScheduler",
        "importPath": "apscheduler.schedulers.asyncio",
        "description": "apscheduler.schedulers.asyncio",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.asyncio",
        "documentation": {}
    },
    {
        "label": "check_records_and_publish",
        "importPath": "app.services.scheduler_service",
        "description": "app.services.scheduler_service",
        "isExtraImport": true,
        "detail": "app.services.scheduler_service",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "peekOfCode": "def get_db() -> Generator:\n    try:\n        db = SessionLocal()\n        yield db\n    finally:\n        db.close()\nasync def get_async_db() -> AsyncGenerator:\n    async with AsyncSessionLocal() as session:\n        yield session\ndef get_redis_service() -> RedisService:",
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "get_redis_service",
        "kind": 2,
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "peekOfCode": "def get_redis_service() -> RedisService:\n    return RedisService()\n# async def get_rabbitmq_service() -> RabbitMQService:\n#     service = RabbitMQService(settings.RABBITMQ_URL)\n#     await service.connect()\n#     return service\ndef get_email_service() -> EmailService:\n    return EmailService()\n# Dependency for RabbitMQ service\n@lru_cache()",
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "get_email_service",
        "kind": 2,
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "peekOfCode": "def get_email_service() -> EmailService:\n    return EmailService()\n# Dependency for RabbitMQ service\n@lru_cache()\ndef get_rabbitmq_service():\n    return RabbitMQService(settings.RABBITMQ_URL , \"email_queue\")",
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "get_rabbitmq_service",
        "kind": 2,
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "peekOfCode": "def get_rabbitmq_service():\n    return RabbitMQService(settings.RABBITMQ_URL , \"email_queue\")",
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "peekOfCode": "engine = create_engine(\n    settings.SQLALCHEMY_DATABASE_URI,\n    pool_pre_ping=True,\n    echo=True\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Async PostgreSQL\nasync_engine = create_async_engine(\n    settings.SQLALCHEMY_DATABASE_URI.replace(\"postgresql://\", \"postgresql+asyncpg://\"),\n    echo=True,",
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Async PostgreSQL\nasync_engine = create_async_engine(\n    settings.SQLALCHEMY_DATABASE_URI.replace(\"postgresql://\", \"postgresql+asyncpg://\"),\n    echo=True,\n    future=True\n)\nfrom sqlalchemy.ext.asyncio import async_sessionmaker\nfrom app.services.rabbit_service import RabbitMQService\nAsyncSessionLocal = async_sessionmaker(",
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "async_engine",
        "kind": 5,
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "peekOfCode": "async_engine = create_async_engine(\n    settings.SQLALCHEMY_DATABASE_URI.replace(\"postgresql://\", \"postgresql+asyncpg://\"),\n    echo=True,\n    future=True\n)\nfrom sqlalchemy.ext.asyncio import async_sessionmaker\nfrom app.services.rabbit_service import RabbitMQService\nAsyncSessionLocal = async_sessionmaker(\n    async_engine, expire_on_commit=False\n)",
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "AsyncSessionLocal",
        "kind": 5,
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "peekOfCode": "AsyncSessionLocal = async_sessionmaker(\n    async_engine, expire_on_commit=False\n)\n# Dependencies\ndef get_db() -> Generator:\n    try:\n        db = SessionLocal()\n        yield db\n    finally:\n        db.close()",
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.core.config",
        "description": "app.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    # PostgreSQL Database\n    POSTGRES_USER: str = \"joydeep\"\n    POSTGRES_PASSWORD: str = \"joydeep122\"\n    POSTGRES_HOST: str = \"localhost\"\n    POSTGRES_PORT: int = 5432\n    POSTGRES_DB: str = \"email_service\"\n    DATABASE_URL: Optional[str] = None\n    @property\n    def SQLALCHEMY_DATABASE_URI(self) -> str:",
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "kind": 2,
        "importPath": "app.core.config",
        "description": "app.core.config",
        "peekOfCode": "def get_settings() -> Settings:\n    return Settings()\nsettings = get_settings()",
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.core.config",
        "description": "app.core.config",
        "peekOfCode": "settings = get_settings()",
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.model.connection",
        "description": "app.model.connection",
        "peekOfCode": "DATABASE_URL = f\"postgresql://{settings.POSTGRES_USER}:{settings.POSTGRES_PASSWORD}@{settings.POSTGRES_HOST}:{settings.POSTGRES_PORT}/{settings.POSTGRES_DB}\"\n# Create the SQLAlchemy engine to interact with the PostgreSQL database\nengine = create_engine(DATABASE_URL)\n# If you want to create tables (if they don't exist already), you can use:\nSQLModel.metadata.create_all(engine)",
        "detail": "app.model.connection",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.model.connection",
        "description": "app.model.connection",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\n# If you want to create tables (if they don't exist already), you can use:\nSQLModel.metadata.create_all(engine)",
        "detail": "app.model.connection",
        "documentation": {}
    },
    {
        "label": "EmailBase",
        "kind": 6,
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "peekOfCode": "class EmailBase(BaseModel):\n    recipient: EmailStr  # Using EmailStr for email validation\n    subject: str\n    body: str\n    status: str\n    created_at: datetime\n    sent_at: Optional[datetime] = None\nclass EmailCreate(BaseModel):\n    recipient: EmailStr\n    subject: str",
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "EmailCreate",
        "kind": 6,
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "peekOfCode": "class EmailCreate(BaseModel):\n    recipient: EmailStr\n    subject: str\n    body: str\nclass EmailUpdate(BaseModel):\n    recipient: Optional[EmailStr] = None\n    subject: Optional[str] = None\n    body: Optional[str] = None\nclass Email(EmailBase, SQLModel, table=True):\n    __tablename__ = \"emails\"  # type: ignore # Explicitly define table name",
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "EmailUpdate",
        "kind": 6,
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "peekOfCode": "class EmailUpdate(BaseModel):\n    recipient: Optional[EmailStr] = None\n    subject: Optional[str] = None\n    body: Optional[str] = None\nclass Email(EmailBase, SQLModel, table=True):\n    __tablename__ = \"emails\"  # type: ignore # Explicitly define table name\n    id: int = Field(default=None, primary_key=True)\n    recipient: str = Field(..., index=True)  # Index email field for faster queries\n    subject: str = Field(...)\n    body: str = Field(...)",
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "Email",
        "kind": 6,
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "peekOfCode": "class Email(EmailBase, SQLModel, table=True):\n    __tablename__ = \"emails\"  # type: ignore # Explicitly define table name\n    id: int = Field(default=None, primary_key=True)\n    recipient: str = Field(..., index=True)  # Index email field for faster queries\n    subject: str = Field(...)\n    body: str = Field(...)\n    status: str = Field(default=\"pending\")\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    sent_at: Optional[datetime] = Field(default=None)\nengine = create_engine(\"postgresql://joydeep:joydeep122@localhost:5432/email_service\")",
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "create_db_and_tables",
        "kind": 2,
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "peekOfCode": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\ndef get_session():\n    with Session(engine) as session:\n        yield session\nSessionDep = Annotated[Session, Depends(get_session)]\ndef save_email_in_db(email: EmailCreate):\n    session:SessionDep = next(get_session())\n    db_email = Email(**email.model_dump())\n    session.add(db_email , False)",
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "peekOfCode": "def get_session():\n    with Session(engine) as session:\n        yield session\nSessionDep = Annotated[Session, Depends(get_session)]\ndef save_email_in_db(email: EmailCreate):\n    session:SessionDep = next(get_session())\n    db_email = Email(**email.model_dump())\n    session.add(db_email , False)\n    session.commit()\n    session.refresh(db_email)",
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "save_email_in_db",
        "kind": 2,
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "peekOfCode": "def save_email_in_db(email: EmailCreate):\n    session:SessionDep = next(get_session())\n    db_email = Email(**email.model_dump())\n    session.add(db_email , False)\n    session.commit()\n    session.refresh(db_email)\n    return db_email\ndef get_email(recipient: str):\n    session:SessionDep = next(get_session())\n    result = session.exec(select(Email).offset(0).limit(10)).all()",
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "get_email",
        "kind": 2,
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "peekOfCode": "def get_email(recipient: str):\n    session:SessionDep = next(get_session())\n    result = session.exec(select(Email).offset(0).limit(10)).all()\n    db_email = result  # Use fetchone() for a single record, or fetchall() for multiple results\n    if not db_email:\n        raise HTTPException(status_code=404, detail=\"Email not found\")\n    return db_email\ndef get_record_by_id(id:int):\n    session:SessionDep = next(get_session())\n    result = session.exec(select(Email).where(Email.id == id)).first()",
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "get_record_by_id",
        "kind": 2,
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "peekOfCode": "def get_record_by_id(id:int):\n    session:SessionDep = next(get_session())\n    result = session.exec(select(Email).where(Email.id == id)).first()\n    if not result:\n        raise HTTPException(status_code=404, detail=\"Email not found\")\n    return result.model_dump()\ndef update_record_by_id(id:int):\n    session:SessionDep = next(get_session())\n    result = session.exec(select(Email).where(Email.id == id)).first()\n    if not result:",
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "update_record_by_id",
        "kind": 2,
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "peekOfCode": "def update_record_by_id(id:int):\n    session:SessionDep = next(get_session())\n    result = session.exec(select(Email).where(Email.id == id)).first()\n    if not result:\n        raise HTTPException(status_code=404, detail=\"Email not found\")\n    result.status = \"sent\"\n    result.sent_at = datetime.utcnow()\n    session.add(result)\n    session.commit()\n    session.refresh(result)",
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "peekOfCode": "engine = create_engine(\"postgresql://joydeep:joydeep122@localhost:5432/email_service\")\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\ndef get_session():\n    with Session(engine) as session:\n        yield session\nSessionDep = Annotated[Session, Depends(get_session)]\ndef save_email_in_db(email: EmailCreate):\n    session:SessionDep = next(get_session())\n    db_email = Email(**email.model_dump())",
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "SessionDep",
        "kind": 5,
        "importPath": "app.model.email_db",
        "description": "app.model.email_db",
        "peekOfCode": "SessionDep = Annotated[Session, Depends(get_session)]\ndef save_email_in_db(email: EmailCreate):\n    session:SessionDep = next(get_session())\n    db_email = Email(**email.model_dump())\n    session.add(db_email , False)\n    session.commit()\n    session.refresh(db_email)\n    return db_email\ndef get_email(recipient: str):\n    session:SessionDep = next(get_session())",
        "detail": "app.model.email_db",
        "documentation": {}
    },
    {
        "label": "EmailService",
        "kind": 6,
        "importPath": "app.services.email_service",
        "description": "app.services.email_service",
        "peekOfCode": "class EmailService:\n    def __init__(self):\n        self.smtp_settings = {\n            \"host\": settings.SMTP_HOST,\n            \"port\": settings.SMTP_PORT,\n            \"user\": settings.SMTP_USER,\n            \"password\": settings.SMTP_PASSWORD,\n            \"tls\": True\n        }\n    def send_email(self, email_data: Dict) -> bool:",
        "detail": "app.services.email_service",
        "documentation": {}
    },
    {
        "label": "RabbitMQService",
        "kind": 6,
        "importPath": "app.services.rabbit_service",
        "description": "app.services.rabbit_service",
        "peekOfCode": "class RabbitMQService:\n    def __init__(self, rabbitmq_url: str , queue:str) :\n        self.url = rabbitmq_url\n        self.connection = None\n        self.channel = None\n        self.queue_name = queue\n    def connect(self):\n        if not self.connection:\n            connection = pika.BlockingConnection(pika.ConnectionParameters(\"localhost\"))\n            self.connection = connection",
        "detail": "app.services.rabbit_service",
        "documentation": {}
    },
    {
        "label": "process_email",
        "kind": 2,
        "importPath": "app.services.rabbit_service",
        "description": "app.services.rabbit_service",
        "peekOfCode": "def process_email(ch, method, _, body):\n    email = json.loads(body)\n    print(f\"Processing email: {email['recipient']}\")\n    update_record_by_id(email[\"id\"].split(\":\")[1],)\n    EmailService().send_email(email)\n    # Acknowledge the message\n    ch.basic_ack(delivery_tag=method.delivery_tag)\nclass RabbitMQService:\n    def __init__(self, rabbitmq_url: str , queue:str) :\n        self.url = rabbitmq_url",
        "detail": "app.services.rabbit_service",
        "documentation": {}
    },
    {
        "label": "RedisService",
        "kind": 6,
        "importPath": "app.services.redis_service",
        "description": "app.services.redis_service",
        "peekOfCode": "class RedisService:\n    def __init__(self):\n        self.redis = redis.from_url(settings.REDIS_URL, decode_responses=True)\n    def save_email(self, email: EmailCreate) -> str:\n        email_dict = email.model_dump()\n        email_dict[\"created_at\"] = datetime.utcnow().timestamp()\n        # Generate UUID and use it as the key\n        saved_data = save_email_in_db(email)\n        # Store the UUID in the hash\n        redis_key =f\"email:{saved_data.id}\"",
        "detail": "app.services.redis_service",
        "documentation": {}
    },
    {
        "label": "check_records_and_publish",
        "kind": 2,
        "importPath": "app.services.scheduler_service",
        "description": "app.services.scheduler_service",
        "peekOfCode": "def check_records_and_publish():\n       connection = get_rabbitmq_service()\n       pending_emails = get_redis_service().get_pending_emails()\n       for email in pending_emails:\n           email['created_at'] = int(email['created_at'].timestamp())\n           connection.publish_message(json.dumps(email))",
        "detail": "app.services.scheduler_service",
        "documentation": {}
    },
    {
        "label": "MakeRFC822",
        "kind": 6,
        "importPath": "myenv.bin.make_rfc822",
        "description": "myenv.bin.make_rfc822",
        "peekOfCode": "class MakeRFC822:\n    def __init__(self, options):\n        self.options = options\n    def _headers_from_command_line(self):\n        \"\"\"\n        --add-header \"X-Source: AAA\"\n        \"\"\"\n        r = {}\n        if self.options.add_headers:\n            for s in self.options.add_headers:",
        "detail": "myenv.bin.make_rfc822",
        "documentation": {}
    },
    {
        "label": "EMAIL_STATUS",
        "kind": 6,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "class EMAIL_STATUS(Enum):\n    SENT = \"SENT\"\n    PENDING = \"PENDING\"\n    FAILED= \"FAILED\"\nEMAIL_PREFIX = \"email:\"\nPENDING_EMAILS = \"pending_emails\"\nPROCESSING_EMAILS = \"processing_emails\"\nFAILED_EMAILS = \"failed_emails\"\nBATCH_SIZE = 10\nSCHEDULER_INTERVAL_SECONDS = 60",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "EMAIL_PREFIX",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "EMAIL_PREFIX = \"email:\"\nPENDING_EMAILS = \"pending_emails\"\nPROCESSING_EMAILS = \"processing_emails\"\nFAILED_EMAILS = \"failed_emails\"\nBATCH_SIZE = 10\nSCHEDULER_INTERVAL_SECONDS = 60",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "PENDING_EMAILS",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "PENDING_EMAILS = \"pending_emails\"\nPROCESSING_EMAILS = \"processing_emails\"\nFAILED_EMAILS = \"failed_emails\"\nBATCH_SIZE = 10\nSCHEDULER_INTERVAL_SECONDS = 60",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "PROCESSING_EMAILS",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "PROCESSING_EMAILS = \"processing_emails\"\nFAILED_EMAILS = \"failed_emails\"\nBATCH_SIZE = 10\nSCHEDULER_INTERVAL_SECONDS = 60",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "FAILED_EMAILS",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "FAILED_EMAILS = \"failed_emails\"\nBATCH_SIZE = 10\nSCHEDULER_INTERVAL_SECONDS = 60",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "BATCH_SIZE",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "BATCH_SIZE = 10\nSCHEDULER_INTERVAL_SECONDS = 60",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "SCHEDULER_INTERVAL_SECONDS",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "SCHEDULER_INTERVAL_SECONDS = 60",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "EmailUpdate",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class EmailUpdate(BaseModel):\n    status: str\n# Scheduler setup\nscheduler = AsyncIOScheduler()\nscheduler.add_job(check_records_and_publish, 'interval', minutes=.1)\nscheduler.start()\n# Ensure the scheduler is shut down properly when the application exits\n@app.on_event(\"shutdown\")\ndef shutdown_event():\n    scheduler.shutdown()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_redis_service",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_redis_service():\n    return RedisService()\n@app.post(\"/emails/\", response_model=str)\ndef create_email(email: EmailCreate, redis_service: RedisService = Depends(get_redis_service)):\n    email_id = redis_service.save_email(email)\n    return email_id\n@app.get(\"/:email_id\", response_model=EmailCreate)\ndef get_email_status(email_id: str):\n    email = get_email(email_id)\n    return email",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "create_email",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def create_email(email: EmailCreate, redis_service: RedisService = Depends(get_redis_service)):\n    email_id = redis_service.save_email(email)\n    return email_id\n@app.get(\"/:email_id\", response_model=EmailCreate)\ndef get_email_status(email_id: str):\n    email = get_email(email_id)\n    return email\n@app.get(\"/emails/pending\", response_model=List[dict])\ndef get_pending_emails(redis_service: RedisService = Depends(get_redis_service)):\n    pending_emails = redis_service.get_pending_emails()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_email_status",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_email_status(email_id: str):\n    email = get_email(email_id)\n    return email\n@app.get(\"/emails/pending\", response_model=List[dict])\ndef get_pending_emails(redis_service: RedisService = Depends(get_redis_service)):\n    pending_emails = redis_service.get_pending_emails()\n    return pending_emails\n@app.get(\"/id:id\")\ndef get_email_record(id:int):\n    return update_record_by_id(id)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_pending_emails",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_pending_emails(redis_service: RedisService = Depends(get_redis_service)):\n    pending_emails = redis_service.get_pending_emails()\n    return pending_emails\n@app.get(\"/id:id\")\ndef get_email_record(id:int):\n    return update_record_by_id(id)\n# @app.exception_handler()\ndef test():\n    try:    \n        raise HTTPException(status_code=404, detail=\"Item not found\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_email_record",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_email_record(id:int):\n    return update_record_by_id(id)\n# @app.exception_handler()\ndef test():\n    try:    \n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    except HTTPException as e:\n        print(\"error\")\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n# Models for request bodies",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def test():\n    try:    \n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    except HTTPException as e:\n        print(\"error\")\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n# Models for request bodies\nclass EmailUpdate(BaseModel):\n    status: str\n# Scheduler setup",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "shutdown_event",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def shutdown_event():\n    scheduler.shutdown()\n@app.on_event(\"startup\")\ndef startup_event():\n    create_db_and_tables()\n    connection = get_rabbitmq_service()\n    connection.connect()\n# async def main():\n#     worker = EmailWorker(\n#         RabbitMQService(settings.RABBITMQ_URL),",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "startup_event",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def startup_event():\n    create_db_and_tables()\n    connection = get_rabbitmq_service()\n    connection.connect()\n# async def main():\n#     worker = EmailWorker(\n#         RabbitMQService(settings.RABBITMQ_URL),\n#         RedisService(settings.REDIS_URL),\n#         EmailService()\n#     )",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# Dependency to get the Redis service\ndef get_redis_service():\n    return RedisService()\n@app.post(\"/emails/\", response_model=str)\ndef create_email(email: EmailCreate, redis_service: RedisService = Depends(get_redis_service)):\n    email_id = redis_service.save_email(email)\n    return email_id\n@app.get(\"/:email_id\", response_model=EmailCreate)\ndef get_email_status(email_id: str):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "scheduler = AsyncIOScheduler()\nscheduler.add_job(check_records_and_publish, 'interval', minutes=.1)\nscheduler.start()\n# Ensure the scheduler is shut down properly when the application exits\n@app.on_event(\"shutdown\")\ndef shutdown_event():\n    scheduler.shutdown()\n@app.on_event(\"startup\")\ndef startup_event():\n    create_db_and_tables()",
        "detail": "main",
        "documentation": {}
    }
]